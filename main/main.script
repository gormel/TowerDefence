local ecstasy                          = require "external.ecstasy"
local Components                       = require "ecs.components"
local const                            = require "ecs.constants"
local DestroySystem                    = require "ecs.systems.DestroySystem"
local InitViewSystem                   = require "ecs.systems.InitViewSystem"
local ClearViewSystem                  = require "ecs.systems.ClearViewSystem"
local RequestTowerSystem               = require "ecs.systems.RequestTowerSystem"
local CreateTowerSystem                = require "ecs.systems.CreateTowerSystem"
local SelectTowerTypeSystem            = require "ecs.systems.SelectTowerTypeSystem"
local PoseViewSystem                   = require "ecs.systems.PoseViewSystem"
local RoundToCellSystem                = require "ecs.systems.RoundToCellSystem"
local FollowPointerSystem              = require "ecs.systems.FollowPointerSystem"
local RenderMoneySystem                = require "ecs.systems.RenderMoneySystem"
local RenderSelectedTowerTypeSystem    = require "ecs.systems.RenderSelectedTowerTypeSystem"
local AttachToParentSystem             = require "ecs.systems.AttachToParentSystem"
local ClearTargetReachedSystem         = require "ecs.systems.ClearTargetReachedSystem"
local ApplyVelocitySystem              = require "ecs.systems.ApplyVelocitySystem"
local FollowTargetSystem               = require "ecs.systems.FollowTargetSystem"
local RotateToTargetSystem             = require "ecs.systems.RotateToTargetSystem"
local FreeOutOfViewTargetSystem        = require "ecs.systems.FreeOutOfViewTargetSystem"
local FreeTargetSystem                 = require "ecs.systems.FreeTargetSystem"
local TargetMonsterInViewRadiusSystem  = require "ecs.systems.TargetMonsterInViewRadiusSystem"
local setup                            = require "ecs.setup"
local CooldownSystem                   = require "ecs.systems.CooldownSystem"
local SpawnMonsterSystem               = require "ecs.systems.SpawnMonsterSystem"
local CreateMonsterSystem              = require "ecs.systems.CreateMonsterSystem"
local RotateViewSystem                 = require "ecs.systems.RotateViewSystem"
local SwitchWaypointSystem             = require "ecs.systems.SwitchWaypointSystem"
local DealDamageOnTargetReachedSystem  = require "ecs.systems.DealDamageOnTargetReachedSystem"
local DestroyOnTargetReachedSystem     = require "ecs.systems.DestroyOnTargetReachedSystem"
local ShootSystem                      = require "ecs.systems.ShootSystem"
local DestroyChildrenSystem            = require "ecs.systems.DestroyChildrenSystem"
local DestroyByHealthSystem            = require "ecs.systems.DestroyByHealthSystem"
local DestroyOnNoTargetSystem          = require "ecs.systems.DestroyOnNoTargetSystem"
local RewardSystem                     = require "ecs.systems.RewardSystem"
local DestroyOnCastleReachedSystem     = require "ecs.systems.DestroyOnCastleReachedSystem"
local GameOverSystem                   = require "ecs.systems.GameOverSystem"
local mesages                          = require "main.mesages"
local SetupSpeedSystem                 = require "ecs.systems.SetupSpeedSystem"
local ApplyStatusSystem                = require "ecs.systems.ApplyStatusSystem"
local ApplyStatusOnTragetReachedSystem = require "ecs.systems.ApplyStatusOnTragetReachedSystem"
local FrozenSystem                     = require "ecs.systems.FrozenSystem"
local PoisonSystem                     = require "ecs.systems.PoisonSystem"
local BlockedSystem                    = require "ecs.systems.BlockedSystem"
local LaunchMonsterSpawnerSystem       = require "ecs.systems.LaunchMonsterSpawnerSystem"
local Constants                        = require "ecs.constants"
local NextWaveSystem                   = require "ecs.systems.NextWaveSystem"
local RenderHealthSystem               = require "ecs.systems.RenderHealthSystem"
local AttachHealthBarSystem            = require "ecs.systems.AttachHealthBarSystem"
local AttachFrozenStatusSystem         = require "ecs.systems.AttachFrozenStatusSystem"
local AttachPoisonedStatusSystem       = require "ecs.systems.AttachPoisonedStatusSystem"
local SelectTowerSystem                = require "ecs.systems.SelectTowerSystem"
local RenderSelectedTowerSystem        = require "ecs.systems.RenderSelectedTowerSystem"
local DealDamageSystem                 = require "ecs.systems.DealDamageSystem"
local AttachSelectionViewSystem        = require "ecs.systems.AttachSelectionViewSystem"
local AttachUpgradeViewSystem          = require "ecs.systems.AttachUpgradeViewSystem"
local DetectClickSystem                = require "ecs.systems.DetectClickSystem"
local BuyTowerSystem                   = require "ecs.systems.BuyTowerSystem"
local UpgradeTowerSystem               = require "ecs.systems.UpgradeTowerSystem"
local UpgradeViewClickedSystem         = require "ecs.systems.UpgradeViewClickedSystem"
local locator                          = require "engine.locator"
local engine_msg                       = require "engine.messages"
local scenes                           = require "main.scenes"

local DefWorld                         = ecstasy.World()

local function init_castle(self, entity)
	self.world:add_component(Components.Castle, entity)
	local castle_health = self.world:add_component(Components.Health, entity)
	castle_health.value = setup.CastleSetup.health
	castle_health.max_value = setup.CastleSetup.health

	local view_entity = self.world:new_entity()
	local vew_resource = self.world:add_component(Components.Resource, view_entity)
	vew_resource.factory_url = "/world_objects#castle_factory"
	local view_parent = self.world:add_component(Components.Parent, view_entity)
	view_parent.entity = entity
	self.world:add_component(Components.AttachToParent, view_entity)
end

local function init_spawner(self, entity)
	local spawner_entity = entity
	local spawner_setup = self.world:add_component(Components.MonsterSpawner, spawner_entity)
	spawner_setup.setup = setup.MonsterSpawnerSetup
end

local function init_waypoint(self, position)
	local waypoint_entity = self.world:new_entity()
	local pos = self.world:add_component(Components.Position, waypoint_entity)
	pos.x = position.x
	pos.y = position.y
	self.world:add_component(Components.Waypoint, waypoint_entity)
	self.world:add_component(Components.BlocksTower, waypoint_entity)
	return waypoint_entity
end

local function link_waypoints(self, entities)
	local prev = nil
	for _, entity in ipairs(entities) do
		local pos = self.world:get_component(Components.Position, entity)

		if prev ~= nil then
			local prev_waypoint = self.world:get_component(Components.Waypoint, prev)
			prev_waypoint.next = entity

			local prev_pos = self.world:get_component(Components.Position, prev)
			local delta_x = pos.x - prev_pos.x
			local delta_y = pos.y - prev_pos.y
			local dist = math.sqrt(delta_x * delta_x + delta_y * delta_y)
			for i = const.CELL_SIZE, dist, const.CELL_SIZE do
				local palet_entity = self.world:new_entity()
				local palet_pos = self.world:add_component(Components.Position, palet_entity)
				palet_pos.x = pos.x - delta_x * i / (dist)
				palet_pos.y = pos.y - delta_y * i / (dist)
				self.world:add_component(Components.BlocksTower, palet_entity)

				local palet_view_entity = self.world:new_entity()
				local palet_vew_resource = self.world:add_component(Components.Resource, palet_view_entity)
				palet_vew_resource.factory_url = "/world_objects#palete_factory"
				local palet_view_parent = self.world:add_component(Components.Parent, palet_view_entity)
				palet_view_parent.entity = palet_entity
				self.world:add_component(Components.AttachToParent, palet_view_entity)
			end
		end

		prev = entity
	end
end

local function init_map(self, map_id)
	local map = setup.Maps[map_id]
	local castle = init_waypoint(self, map.Castle)
	init_castle(self, castle)
	for _, route in pairs(map.Routes) do
		local waypoints = {}
		for _, position in ipairs(route) do
			table.insert(waypoints, init_waypoint(self, position))
		end
		table.insert(waypoints, castle)

		link_waypoints(self, waypoints)

		init_spawner(self, waypoints[1])
	end
end

local function init_game(self)
	--Money
	local money_entity = self.world:new_entity()
	local money = self.world:add_component(Components.Money, money_entity)
	money.value = 150

	--Selected tower type
	local tower_type_entity = self.world:new_entity()
	local tower_type = self.world:add_component(Components.SelectedTowerType, tower_type_entity)
	tower_type.tower_type = const.TOWER_TYPE_COMMON

	--Cursor
	local cursor_entity = self.world:new_entity()
	local cursor_resource = self.world:add_component(Components.Resource, cursor_entity)
	cursor_resource.factory_url = "/ui#cursor_factory"
	self.world:add_component(Components.Position, cursor_entity)
	self.world:add_component(Components.FollowPointer, cursor_entity)
	self.world:add_component(Components.RoundToCell, cursor_entity)

	init_map(self, locator.current_map or "Map_01")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

	local seed = os.time()
	math.randomseed(seed or 5)

	self.world = DefWorld:new()

	self.systems = ecstasy.SystemsList({ world = self.world })
	--init
	self.systems:register(InitViewSystem)

	self.systems:register(SelectTowerTypeSystem)
	self.systems:register(RequestTowerSystem)
	self.systems:register(SelectTowerSystem)

	--setup parameters
	self.systems:register(SetupSpeedSystem)

	--modify parameters
	self.systems:register(FrozenSystem)
	self.systems:register(PoisonSystem)

	self.systems:register(DetectClickSystem)
	self.systems:register(FollowPointerSystem)
	self.systems:register(RoundToCellSystem)
	self.systems:register(AttachToParentSystem)
	self.systems:register(FollowTargetSystem)
	self.systems:register(RotateToTargetSystem)
	self.systems:register(ApplyVelocitySystem)
	self.systems:register(CooldownSystem)
	self.systems:register(BlockedSystem)
	self.systems:register(AttachHealthBarSystem)
	self.systems:register(AttachFrozenStatusSystem)
	self.systems:register(AttachPoisonedStatusSystem)
	self.systems:register(AttachSelectionViewSystem)
	self.systems:register(AttachUpgradeViewSystem)

	self.systems:register(LaunchMonsterSpawnerSystem)
	self.systems:register(ApplyStatusSystem)
	self.systems:register(ShootSystem)
	self.systems:register(SwitchWaypointSystem)
	self.systems:register(TargetMonsterInViewRadiusSystem)
	self.systems:register(SpawnMonsterSystem)
	self.systems:register(DealDamageOnTargetReachedSystem)
	self.systems:register(DestroyOnTargetReachedSystem)
	self.systems:register(DestroyOnCastleReachedSystem)
	self.systems:register(ApplyStatusOnTragetReachedSystem)
	self.systems:register(NextWaveSystem)
	self.systems:register(BuyTowerSystem)
	self.systems:register(UpgradeTowerSystem)
	self.systems:register(UpgradeViewClickedSystem)

	self.systems:register(CreateMonsterSystem)
	self.systems:register(CreateTowerSystem)

	self.systems:register(DealDamageSystem)


	--render scene
	self.systems:register(PoseViewSystem)
	self.systems:register(RotateViewSystem)
	self.systems:register(RenderHealthSystem)

	--render gui
	self.systems:register(RenderMoneySystem)
	self.systems:register(RenderSelectedTowerTypeSystem)
	self.systems:register(RenderSelectedTowerSystem)

	--destroys
	self.systems:register(DestroyByHealthSystem)
	self.systems:register(DestroyOnNoTargetSystem)
	self.systems:register(DestroyChildrenSystem)

	--destroy triggers
	self.systems:register(FreeTargetSystem)
	self.systems:register(FreeOutOfViewTargetSystem)
	self.systems:register(ClearTargetReachedSystem)
	self.systems:register(RewardSystem)
	self.systems:register(GameOverSystem)
	self.systems:register(ClearViewSystem)

	--process destroy
	self.systems:register(DestroySystem)

	self.systems:init()

	init_game(self)
end

local function select_tower_build(self, tower_type)
	local req_entity = self.world:new_entity()
	local req = self.world:add_component(Components.SelectTowerTypeRequest, req_entity)
	req.tower_type = tower_type
	self.world:add_component(Components.Destroyed, req_entity)
end

local function next_wave(self)
	local req_entity = self.world:new_entity()
	self.world:add_component(Components.NextWaveRequest, req_entity)
	self.world:add_component(Components.Destroyed, req_entity)
end

function on_message(self, message_id, message, sender)
	if message_id == mesages.GAME_OVER then
		msg.post(Constants.URL_GUI, mesages.GAME_OVER)
	elseif message_id == mesages.SELECT_TOWER then
		select_tower_build(self, message.tower_type)
	elseif message_id == mesages.NEXT_WAVE then
		next_wave(self)
	elseif message_id == mesages.RESTART then
		msg.post(Constants.URL_ROUTER, engine_msg.LOAD_SCENE, { name = scenes.MAIN_MENU })
	end
end

function on_input(self, action_id, action)
	if action_id == nil then
		local touch_entity = self.world:new_entity()
		local pointer = self.world:add_component(Components.PointerInput, touch_entity)
		pointer.x = action.x
		pointer.y = action.y
		self.world:add_component(Components.Destroyed, touch_entity)
	elseif action_id == hash("touch") then
		local touch_entity = self.world:new_entity()
		local pointer = self.world:add_component(Components.PointerInput, touch_entity)
		pointer.x = action.x
		pointer.y = action.y
		if action.pressed then
			self.world:add_component(Components.MouseDownInput, touch_entity)
		end
		self.world:add_component(Components.Destroyed, touch_entity)
	end
end

function update(self, dt)
	self.systems:execute(dt)
end
