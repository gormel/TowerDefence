local ecstasy                    = require "external.ecstasy"
local Components                 = require "ecs.components"
local InitViewSystem             = require "ecs.systems.InitViewSystem"
local DetectClickSystem          = require "ecs.systems.DetectClickSystem"
local FollowPointerSystem        = require "ecs.systems.FollowPointerSystem"
local RoundToCellSystem          = require "ecs.systems.RoundToCellSystem"
local AttachToParentSystem       = require "ecs.systems.AttachToParentSystem"
local BlockedSystem              = require "ecs.systems.BlockedSystem"
local PoseViewSystem             = require "ecs.systems.PoseViewSystem"
local RotateViewSystem           = require "ecs.systems.RotateViewSystem"
local DestroyChildrenSystem      = require "ecs.systems.DestroyChildrenSystem"
local ClearViewSystem            = require "ecs.systems.ClearViewSystem"
local DestroySystem              = require "ecs.systems.DestroySystem"
local mesages                    = require "editor.mesages"
local SwitchModeSystem           = require "ecs.editor_systems.SwitchModeSystem"
local EComponents                = require "ecs.editor_components"
local SetCastleSystem            = require "ecs.editor_systems.SetCastleSystem"
local SetWaypointSystem          = require "ecs.editor_systems.SetWaypointSystem"
local ExportSystem               = require "ecs.editor_systems.ExportSystem"
local ClearConnectionSystem      = require "ecs.editor_systems.ClearConnectionSystem"
local AttachConnectionViewSystem = require "ecs.editor_systems.AttachConnectionViewSystem"
local ConnectionSystem           = require "ecs.editor_systems.ConnectionSystem"
local RenderConnectionSystem     = require "ecs.editor_systems.RenderConnectionSystem"
local DelWaypointSystem          = require "ecs.editor_systems.DelWaypointSystem"
local DelRouteSystem             = require "ecs.editor_systems.DelRouteSystem"
local setup                      = require "ecs.setup"
local constants                  = require "ecs.constants"


local function init_editor(self)
	--Cursor
	local cursor_entity = self.world:new_entity()
	local cursor_resource = self.world:add_component(Components.Resource, cursor_entity)
	cursor_resource.factory_url = "/ui#cursor_factory"
	self.world:add_component(Components.Position, cursor_entity)
	self.world:add_component(Components.FollowPointer, cursor_entity)
	self.world:add_component(Components.RoundToCell, cursor_entity)
end
local function init_castle(self, entity)
	self.world:add_component(Components.Castle, entity)
	
	local view_entity = self.world:new_entity()
	local vew_resource = self.world:add_component(Components.Resource, view_entity)
	vew_resource.factory_url = constants.FACTORY_URL_EDITOR_CASTLE
	local view_parent = self.world:add_component(Components.Parent, view_entity)
	view_parent.entity = entity
	self.world:add_component(Components.AttachToParent, view_entity)
end

local function init_waypoint(self, position)
	local waypoint_entity = self.world:new_entity()
	local pos = self.world:add_component(Components.Position, waypoint_entity)
	pos.x = position.x
	pos.y = position.y
	self.world:add_component(Components.Waypoint, waypoint_entity)

	local view_entity = self.world:new_entity()
	local vew_resource = self.world:add_component(Components.Resource, view_entity)
	vew_resource.factory_url = constants.FACTORY_URL_EDITOR_WAYPOINT
	local view_parent = self.world:add_component(Components.Parent, view_entity)
	view_parent.entity = waypoint_entity
	self.world:add_component(Components.AttachToParent, view_entity)

	return waypoint_entity
end

local function link_waypoints(self, entities)
	local prev = nil
	for _, entity in ipairs(entities) do
		if prev ~= nil then
			local prev_waypoint = self.world:get_component(Components.Waypoint, prev)
			prev_waypoint.next = entity

			local connection_entity = self.world:new_entity()
			local connection = self.world:add_component(EComponents.Connection, connection_entity)
			connection.a_entity = prev
			connection.b_entity = entity
			self.world:add_component(EComponents.AttachConnectionView, connection_entity)
		end

		prev = entity
	end
end

local function init_map(self, map_id)
	local map = setup.Maps[map_id]
	local castle = init_waypoint(self, map.Castle)
	init_castle(self, castle)
	for _, route in pairs(map.Routes) do
		local waypoints = {}
		for idx, position in ipairs(route) do
			local wp_entity = init_waypoint(self, position)
			table.insert(waypoints, wp_entity)
			if idx == 1 then
				self.world:add_component(EComponents.RootWaypoint, wp_entity)
			end
		end

		link_waypoints(self, waypoints)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

	self.world = ecstasy.World:new()

	self.systems = ecstasy.SystemsList({ world = self.world })
	--init
	self.systems:register(InitViewSystem)

	self.systems:register(DetectClickSystem)
	self.systems:register(FollowPointerSystem)
	self.systems:register(RoundToCellSystem)
	self.systems:register(AttachToParentSystem)
	self.systems:register(BlockedSystem)

	self.systems:register(SwitchModeSystem)
	self.systems:register(SetCastleSystem)
	self.systems:register(SetWaypointSystem)
	self.systems:register(DelWaypointSystem)
	self.systems:register(DelRouteSystem)
	self.systems:register(ExportSystem)

	self.systems:register(ConnectionSystem)
	self.systems:register(AttachConnectionViewSystem)

	--render scene
	self.systems:register(RenderConnectionSystem)
	self.systems:register(PoseViewSystem)
	self.systems:register(RotateViewSystem)

	--destroys
	self.systems:register(ClearConnectionSystem)
	self.systems:register(DestroyChildrenSystem)

	--destroy triggers
	self.systems:register(ClearViewSystem)

	--process destroy
	self.systems:register(DestroySystem)

	self.systems:init()
	init_editor(self)
end

function update(self, dt)
	self.systems:execute(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == mesages.SET_ROUTE_MODE then
		local entity = self.world:new_entity()
		self.world:add_component(EComponents.NewEditorMode, entity)
		self.world:add_component(EComponents.RouteEditorMode, entity)
	elseif message_id == mesages.LOAD_MAP then
        for i = 1, self.world.current_entity_id do
			self.world:add_component(Components.Destroyed, i)
        end
		init_editor(self)
		init_map(self, message.map)
	elseif message_id == mesages.EXPORT then
		local entity = self.world:new_entity()
		self.world:add_component(EComponents.ExportMap, entity)
		self.world:add_component(Components.Destroyed, entity)
	elseif message_id == mesages.SET_REMOVE_ROUTE_MODE then
		local entity = self.world:new_entity()
		self.world:add_component(EComponents.NewEditorMode, entity)
		self.world:add_component(EComponents.RemoveRouteEditorMode, entity)
	elseif message_id == mesages.SET_REMOVE_WAYPOINT_MODE then
		local entity = self.world:new_entity()
		self.world:add_component(EComponents.NewEditorMode, entity)
		self.world:add_component(EComponents.RemoveWaypointEditorMode, entity)
	elseif message_id == mesages.SET_CASTLE_MODE then
		local entity = self.world:new_entity()
		self.world:add_component(EComponents.NewEditorMode, entity)
		self.world:add_component(EComponents.CastleEditorMode, entity)
	end
end

function on_input(self, action_id, action)
	if action_id == nil then
		local touch_entity = self.world:new_entity()
		local pointer = self.world:add_component(Components.PointerInput, touch_entity)
		pointer.x = action.x
		pointer.y = action.y
		self.world:add_component(Components.Destroyed, touch_entity)
	elseif action_id == hash("touch") then
		local touch_entity = self.world:new_entity()
		local pointer = self.world:add_component(Components.PointerInput, touch_entity)
		pointer.x = action.x
		pointer.y = action.y
		if action.pressed then
			self.world:add_component(Components.MouseDownInput, touch_entity)
		end
		self.world:add_component(Components.Destroyed, touch_entity)
	end
end
