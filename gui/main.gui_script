local Constants  = require("ecs.constants")
local mesages    = require("main.mesages")
local setup      = require("ecs.setup")
local Components = require("ecs.components")
local ui         = require("gui.ui")

local scheme     = {
	TOWER_FRAGMENTS = {
		SELECTED = "/selection",
		BUTTON = "/root_node",
	},

	TEXT_MONEY = "money_text",
	IMAGE_GAME_OVER = "restart",
	BUTTON_RESTART = "btn_restart",
	BUTTON_RESTART_MENU = "btn_menu",
	BUTTON_NEXT_WAVE = "btn_next_wave",
	BUTTON_MAIN_MENU = "btn_main_menu",
	TEXT_WAVE_INDEX = "wave_index_value_text",

	NODE_SELECTED_TOWER_INFO = "tower_info",
	TEXT_TOWER_NAME = "text_title",
	TEXT_STATS = "text_stats",
	IMAGE_SELECTED_TOWER = "img_tower",
}

function init(self)
	ui.push()
	msg.post(".", "acquire_input_focus")
	msg.post("#", mesages.START)
end

local function on_main_menu_click()
	msg.post(Constants.URL_MAIN, mesages.GO_MAIN_MENU)
end

local function on_next_wave_click()
	msg.post(Constants.URL_MAIN, mesages.NEXT_WAVE)
end

local function on_restart_click()
	gui.set_enabled(gui.get_node(scheme.IMAGE_GAME_OVER), false)
	msg.post(Constants.URL_MAIN, mesages.RESTART)
end

local function on_select_click(self, tower_type)
	msg.post(Constants.URL_MAIN, mesages.SELECT_TOWER, { tower_type = tower_type })
end

local function get_tower_node(tower_setup, fragment)
	return gui.get_node(tower_setup.button_template .. fragment)
end

local function update_selected_tower(self, emplty, tower_type, dps, statuses, kills)
	if emplty then
		gui.set_enabled(gui.get_node(scheme.NODE_SELECTED_TOWER_INFO), false)
		return
	end

	local tower_cfg = setup.Towers[tower_type]

	gui.set_enabled(gui.get_node(scheme.NODE_SELECTED_TOWER_INFO), true)

	gui.set_text(gui.get_node(scheme.TEXT_TOWER_NAME), tower_type)

	local stats_text = string.format([[dps: %d
apply: %s
kills: %d]], dps, table.concat(statuses, ", "), kills)
	gui.set_text(gui.get_node(scheme.TEXT_STATS), stats_text)
	gui.play_flipbook(gui.get_node(scheme.IMAGE_SELECTED_TOWER), tower_cfg.gui_icon)
end

local function on_start(self)
	ui.add_button(gui.get_node(scheme.BUTTON_RESTART), on_restart_click)
	ui.add_button(gui.get_node(scheme.BUTTON_RESTART_MENU), on_main_menu_click)
	ui.add_button(gui.get_node(scheme.BUTTON_NEXT_WAVE), on_next_wave_click)
	ui.add_button(gui.get_node(scheme.BUTTON_MAIN_MENU), on_main_menu_click)

	for tower_setup_type, tower_setup in pairs(setup.Towers) do
		if tower_setup.button_template ~= nil then
			local node = get_tower_node(tower_setup, scheme.TOWER_FRAGMENTS.BUTTON)
			local tower_type = tower_setup_type
			ui.add_button(node, function() on_select_click(self, tower_type) end)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == mesages.UPDATE_WAVE_INDEX then
		gui.set_text(gui.get_node(scheme.TEXT_WAVE_INDEX), message.wave)
	elseif message_id == mesages.UPDATE_MONEY then
		gui.set_text(gui.get_node(scheme.TEXT_MONEY), message.money)
	elseif message_id == mesages.START then
		on_start(self)
	elseif message_id == mesages.UPDATE_IDLE_STATE then
		gui.set_enabled(gui.get_node(scheme.BUTTON_NEXT_WAVE), message.state)
	elseif message_id == mesages.GAME_OVER then
		gui.set_enabled(gui.get_node(scheme.IMAGE_GAME_OVER), true)
	elseif message_id == mesages.UPDATE_SELECTED_TOWER then
		update_selected_tower(self, message.empty, message.tower_type, message.dps, message.statuses, message.kills)
	elseif message_id == mesages.UPDATE_SELECTED_TOWER_TYPE then
		local tower_type = message.tower_type
		for tower_setup_type, tower_setup in pairs(setup.Towers) do
			if tower_setup.button_template ~= nil then
				local node = get_tower_node(tower_setup, scheme.TOWER_FRAGMENTS.SELECTED)
				gui.set_visible(node, tower_setup_type == tower_type)
			end
		end
	end
end

function on_input(self, action_id, action)
	return ui.on_input(action_id, action)
end

function final(self)
	ui.final()
end
