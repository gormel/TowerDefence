local Msg = require("main.mesages")
local Constants = require("ecs.constants")
local mesages   = require("main.mesages")
local setup     = require("ecs.setup")

local scheme = {
	TOWER_FRAGMENTS = {
		SELECTED = "/selection",
		BUTTON = "/root_node",
	},

	TEXT_MONEY = "money_text",
	IMAGE_GAME_OVER = "restart",
	BUTTON_RESTART = "btn_restart",
	BUTTON_NEXT_WAVE = "btn_next_wave",
}

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#", Msg.START)
end

function final(self)
end

function update(self, dt)
end

local function add_button(self, node, callback)
	table.insert(self.buttons, { node = node, callback = callback })
end

local function on_restart_click(self)
	gui.set_enabled(gui.get_node(scheme.IMAGE_GAME_OVER), false)
	msg.post("/go#main", mesages.RESTART)
end

local function on_select_click(self, tower_type)
	msg.post("/go#main", mesages.SELECT_TOWER, { tower_type = tower_type })
end

local function get_tower_node(tower_setup, fragment)
	return gui.get_node(tower_setup.button_template..fragment)
end

local function on_start(self)
	self.buttons = {}

	add_button(self, gui.get_node(scheme.BUTTON_RESTART), on_restart_click)
	for tower_setup_type, tower_setup in pairs(setup.Towers) do
		local node = get_tower_node(tower_setup, scheme.TOWER_FRAGMENTS.BUTTON)
		local tower_type = tower_setup_type
		add_button(self, node, function() on_select_click(self, tower_type) end)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == Msg.UPDATE_MONEY then
		gui.set_text(gui.get_node(scheme.TEXT_MONEY), message.money)
	elseif message_id == Msg.START then
		on_start(self)
	elseif message_id == Msg.GAME_OVER then
		gui.set_enabled(gui.get_node(scheme.IMAGE_GAME_OVER), true)
	elseif message_id == Msg.UPDATE_SELECTED_TOWER then
		local tower_type = message.tower_type
		for tower_setup_type, tower_setup in pairs(setup.Towers) do
			local node = get_tower_node(tower_setup, scheme.TOWER_FRAGMENTS.SELECTED)
			gui.set_visible(node, tower_setup_type == tower_type)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		for _, button in ipairs(self.buttons) do
			if button.callback and gui.pick_node(button.node, action.x, action.y) then
				button.callback(self)
				return true
			end
		end
	end
	return false
end
